name: Single-Container Build and Deploy to ECR and ECS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1 # AWS region for ECR and ECS
  ECS_SERVICE: my-ecs-service # ECS service name
  ECS_CLUSTER: my-ecs-cluster # ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Path to task definition file
  CONTAINER_NAME: app-container # Container name in task definition
  ECR_REPOSITORY: my-app-repo # ECR repository name
  IMAGE_TAG: ${{ github.sha }} # Dynamic image tag using commit SHA
  DOCKERFILE_PATH: . # Path to Dockerfile (root by default)

jobs:
  build-and-deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Environment Variables
        run: |
          echo "=== Debug: Build and Deploy Environment Variables ==="
          env | sort
          echo "=== Debug: GitHub Context ==="
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REPOSITORY: ${{ github.repository }}"
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "ECS_SERVICE: ${{ env.ECS_SERVICE }}"
          echo "ECS_CLUSTER: ${{ env.ECS_CLUSTER }}"
          echo "ECS_TASK_DEFINITION: ${{ env.ECS_TASK_DEFINITION }}"
          echo "CONTAINER_NAME: ${{ env.CONTAINER_NAME }}"
          echo "ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}"
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          echo "DOCKERFILE_PATH: ${{ env.DOCKERFILE_PATH }}"
          echo "AWS_ACCESS_KEY_ID (masked): ${{ secrets.AWS_ACCESS_KEY_ID != '' && 'set' || 'not set' }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "=== Debug: Build Configuration ==="
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "Building image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
                       -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
                       -f ${{ env.DOCKERFILE_PATH }}/Dockerfile ${{ env.DOCKERFILE_PATH }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          echo "image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
        id: build-image
        working-directory: ${{ env.DOCKERFILE_PATH }}

      - name: Update Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Debug ECS Service Status
        run: |
          echo "=== Debug: ECS Service Status ==="
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}
