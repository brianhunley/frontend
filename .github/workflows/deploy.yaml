name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: us-east-2 # Set your AWS region
  ECS_SERVICE: frontend-app-task-service-2q3t4uxa # Set your ECS service name
  ECS_CLUSTER: marvelous-wolf-nbjh27 # Set your ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Path to your ECS task definition file
  CONTAINER_NAME: frontend-app-container # Name of the frontend container in task definition
  ECR_REPOSITORY: hunlecb/frontend # Your ECR repository name
  IMAGE_TAG: ${{ github.sha }} # Tag image with commit SHA

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Debug ECR variables
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: $ECR_REPOSITORY
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "Full image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: $ECR_REPOSITORY
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS task definition
        id: update-task
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: $ECR_REPOSITORY
          IMAGE_TAG: ${{ github.sha }}
          ECS_TASK_DEFINITION: task-definition.json
        run: |
          TASK_DEF=$(cat $ECS_TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          echo $TASK_DEF > updated-task-definition.json
          TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task-arn=$TASK_ARN" >> $GITHUB_OUTPUT

      - name: Debug task definition
        run: cat updated-task-definition.json

      - name: Push to ECS service
        env:
          ECS_SERVICE: $ECS_SERVICE
          ECS_CLUSTER: $ECS_CLUSTER
          TASK_ARN: ${{ steps.update-task.outputs.task-arn }}
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_ARN --force-new-deployment
          echo "Deployed to ECS service $ECS_SERVICE in cluster $ECS_CLUSTER with task definition $TASK_ARN"
